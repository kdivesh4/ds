Question 1: WAP to check whether 2 single linked lists are equal or not.

#include<iostream>
using namespace std;

class IntSLLNode{

public:
int info;
IntSLLNode *next;

IntSLLNode(){
info=0;
next=NULL;
}

IntSLLNode(int val,IntSLLNode* ptr){
info=val;
next=ptr;
}
};

class IntSLL{

public:
IntSLLNode* head=NULL;
IntSLLNode* tail=NULL;
int seq=0;
void addtohead(){
int info;
cout<<"\nEnter element "<<++seq<<": ";
cin>>info;
IntSLLNode *node = new IntSLLNode(info,NULL);
if(head==NULL)
head=tail=node;
else{
node->next=head;
head=node;
}
}

void traverse(){
IntSLLNode* p=head;
if(p!=NULL){

while(p!=NULL){
cout<<p->info<<" ";
p=p->next;
}
cout<<"\n";
}
else cout<<"Empty\n";
}

void equality(IntSLL);

};


//**************************************
//**************************************

void IntSLL::equality(IntSLL list2){
IntSLLNode *p1=head,*p2=list2.head;
int flag=0;
if(p1==NULL&&p2==NULL){cout<<"\nBoth Lists are empty"; return;}
while(p1!=NULL&&p2!=NULL){
if(p1->info!=p2->info){flag=1; break;}
p1=p1->next;
p2=p2->next;
}
if(flag==1 ||p1!=NULL || p2!=NULL)cout<<"\nLists are not equal.\n";
else cout<<"\nLists are equal.\n";
}

//**************************************
//**************************************

int main(){
IntSLL list1,list2;
int i,size1,size2;

cout<<"\nEnter the size of List 1: ";
cin>>size1;
cout<<"\nEnter the size of List 2: ";
cin>>size2;
cout<<"\nEnter list 1:\n";
for(i=0;i<size1;i++){
list1.addtohead();
}
cout<<"\nEnter list 2:\n";
for(i=0;i<size2;i++){
list2.addtohead();
}
cout<<"List 1: ";
list1.traverse();
cout<<"List 2: ";
list2.traverse();

list1.equality(list2);

return 0;
}


--------------------------------------------------------------


Question 2: WAP to check if one sorted linked list is subset of another sorted linked list.

#include<iostream>

using namespace std;

class IntSLLNode{

public:
int info;
IntSLLNode *next;

IntSLLNode(){
info=0;
next=NULL;
}

IntSLLNode(int val,IntSLLNode* ptr){
info=val;
next=ptr;
}

};


class IntSLL{

public:
IntSLLNode* head=NULL;
IntSLLNode* tail=NULL;
int seq=0;
void addtohead(){
int info;
cout<<"\nEnter element "<<++seq<<": ";
cin>>info;
IntSLLNode *node = new IntSLLNode(info,NULL);
if(head==NULL)
head=tail=node;
else{
node->next=head;
head=node;
}

}

void traverse(){
IntSLLNode* p=head;
if(p!=NULL){

while(p!=NULL){
cout<<p->info<<" ";
p=p->next;
}
cout<<"\n";
}
else cout<<"Empty\n";
}

void subset(IntSLL);

};

//**************************************
//**************************************

void IntSLL::subset(IntSLL list2){ //lists are in desc order

IntSLLNode *p1=head, *p2=list2.head;
int found=1;
while(found!=0&&p2!=NULL){
found=0;
while(found!=1&&p1!=NULL){
if(p2->info==p1->info){found=1; p1=p1->next; break;}
else if(p2->info>p1->info)break;
p1=p1->next;
}
p2=p2->next;
}
if(found==0)cout<<"\nList 2 is not a subset of List 1\n";
else cout<<"\nList 2 is a subset of List 1\n";
}

//**************************************
//**************************************

int main(){
IntSLL list1,list2;
int i,size1,size2;

cout<<"\nEnter the size of the List: ";
cin>>size1;
cout<<"\nEnter the sorted list(asc order):\n";
for(i=0;i<size1;i++){
list1.addtohead();
}
cout<<"\nEnter the size of the List to be checked for subset: ";
cin>>size2;

cout<<"\nEnter the sorted list(asc order):\n";
for(i=0;i<size2;i++){
list2.addtohead();
}
cout<<"List 1: ";
list1.traverse();
cout<<"List 2: ";
list2.traverse();

list1.subset(list2);

return 0;
}

--------------------------------------------------------------

Question 5: WAP to reverse a SLL of integers using only one pass through th list without creating another list.

#include<iostream>
#include<cstdlib>
using namespace std;

class IntSLLNode{

public:
int info;
IntSLLNode *next;

IntSLLNode(){
info=0;
next=NULL;
}

IntSLLNode(int val,IntSLLNode* ptr){
info=val;
next=ptr;
}

};


class IntSLL{

public:
IntSLLNode* head=NULL;
IntSLLNode* tail=NULL;
int seq=0;
void addtohead(){
int info;
cout<<"\nEnter element "<<++seq<<": ";
cin>>info;
IntSLLNode *node = new IntSLLNode(info,NULL);
if(head==NULL)
head=tail=node;
else{
node->next=head;
head=node;
}

}

void traverse(){
IntSLLNode* p=head;
if(p!=NULL){

while(p!=NULL){
cout<<p->info<<" ";
p=p->next;
}
cout<<"\n";
}
else cout<<"Empty";
}

void reverse(IntSLLNode*);

};


//**************************************

void IntSLL::reverse(IntSLLNode *p){
IntSLLNode *cur=p,*nextnode=NULL, *prev=NULL;
while(cur!=NULL){
nextnode=cur->next;
cur->next=prev;
prev=cur;
cur=nextnode;
}
tail=head;
head=prev;
traverse();
}

//**************************************

int main(){
IntSLL list1;
int i,size1;

cout<<"\nEnter the size of List: ";
cin>>size1;

cout<<"\nEnter the list:\n";
for(i=0;i<size1;i++){
list1.addtohead();
cout<<"List: ";
list1.traverse();
}
cout<<"\nReversed list: ";
list1.reverse(list1.head);

return 0;
}


--------------------------------------------------------------


Question 6: WAP to merge two ordered single linked lists of integers into one ordered linked list.

#include<iostream>
#include<cstdlib>
using namespace std;

class IntOSLLNode{

public:
int info;
IntOSLLNode *next;

IntOSLLNode(){
info=0;
next=NULL;
}

IntOSLLNode(int val,IntOSLLNode* ptr){
info=val;
next=ptr;
}

};


class IntOSLL{

public:
IntOSLLNode* head=NULL;
IntOSLLNode* tail=NULL;

void addtohead(int info){
IntOSLLNode *node = new IntOSLLNode(info,NULL);
if(head==NULL)
head=tail=node;
else{
node->next=head;
head=node;
}
}

void addtotail(int info){
IntOSLLNode *node = new IntOSLLNode(info,NULL);
if(tail==NULL)
head=tail=node;
else{
tail->next=node;
tail=node;
}
}


void traverse(){
IntOSLLNode* p=head;
if(p!=NULL){

while(p!=NULL){
cout<<p->info<<" ";
p=p->next;
}
cout<<"\n";
}
else cout<<"Empty\n";
}

void mergeList(IntOSLL);

};


//***************************************
//***************************************

void IntOSLL::mergeList(IntOSLL list2){
IntOSLL list3;
IntOSLLNode *p1=head, *p2=list2.head;

while(p1!=NULL&&p2!=NULL){
if(p1->info>=p2->info){list3.addtotail(p1->info); p1=p1->next; }
else {list3.addtotail(p2->info); p2=p2->next; }
}

if(p1!=NULL){
while(p1!=NULL){
list3.addtotail(p1->info);
p1=p1->next;
}
}

if(p2!=NULL){
while(p2!=NULL){
list3.addtotail(p2->info);
p2=p2->next;
}
}

cout<<"Merged sorted list is: \n";
list3.traverse();
}

//****************************************
//****************************************

int main(){
IntOSLL list1,list2;
int i,size1,size2,info,seq=0;

cout<<"\nEnter the size of List 1: ";
cin>>size1;
cout<<"\nEnter the size of List 2: ";
cin>>size2;
cout<<"\nEnter sorted list 1:\n";
for(i=0;i<size1;i++){
cout<<"\nEnter element "<<++seq<<": ";
cin>>info;
list1.addtohead(info);
}
seq=0;
cout<<"\nEnter sorted list 2:\n";
for(i=0;i<size2;i++){
cout<<"\nEnter element "<<++seq<<": ";
cin>>info;
list2.addtohead(info);
}
cout<<"List 1: ";
list1.traverse();
cout<<"List 2: ";
list2.traverse();

list1.mergeList(list2);

return 0;
}

--------------------------------------------------------------


Question 7: WAP to concatenate one SLL to another.

#include<iostream>
#include<cstdlib>
using namespace std;

class IntSLLNode{

public:
int info;
IntSLLNode *next;

IntSLLNode(){
info=0;
next=NULL;
}

IntSLLNode(int val,IntSLLNode* ptr){
info=val;
next=ptr;
}

};


class IntSLL{

public:
IntSLLNode* head=NULL;
IntSLLNode* tail=NULL;
int seq=0;

void addtohead(int info){
IntSLLNode *node = new IntSLLNode(info,NULL);
if(head==NULL)
head=tail=node;
else{
node->next=head;
head=node;
}

}

void traverse(){
IntSLLNode* p=head;
if(p!=NULL){

while(p!=NULL){
cout<<p->info<<" ";
p=p->next;
}
cout<<"\n";
}
else cout<<"Empty\n";
}

void concat(IntSLL);

};

//**************************************
//**************************************

void IntSLL::concat(IntSLL list2){
IntSLLNode *p=list2.head;
if(p!=NULL){
if(head==NULL){
addtohead(p->info);
p=p->next;
}

while(p!=NULL){
tail->next=p;
tail=p;
p=p->next;
}
}
traverse();
}

//**************************************
//**************************************
int main(){
IntSLL list1,list2;
int i,size1,size2,info,seq=0;

cout<<"\nEnter the size of List 1: ";
cin>>size1;
cout<<"\nEnter the size of List 2: ";
cin>>size2;
cout<<"\nEnter list 1:\n";
for(i=0;i<size1;i++){
cout<<"\nEnter element "<<++seq<<": ";
cin>>info;
list1.addtohead(info);
}
seq=0;
cout<<"\nEnter list 2:\n";
for(i=0;i<size2;i++){
cout<<"\nEnter element "<<++seq<<": ";
cin>>info;
list2.addtohead(info);
}
cout<<"List 1: ";
list1.traverse();
cout<<"List 2: ";
list2.traverse();
cout<<"\nConcatenated List: ";
list1.concat(list2);

return 0;
}

--------------------------------------------------------------


Question 9: Give template class definition for a double linked list. WAP to delete all odd numbered nodes from the list.

#include<iostream>
#include<stdlib.h>
using namespace std;
template<class X>
class DLLNode{

public:
X info;
DLLNode *next, *prev;
DLLNode(){
next=NULL;
prev=NULL;
}
};

template<class Y>
class DLList{

public:
DLLNode<Y> *head=NULL, *tail=NULL, *p=NULL;

void addtohead(Y val)
{
DLLNode<Y> *newNode= new DLLNode<Y>();
newNode->info=val;
if(head==NULL)
{
head=newNode;
tail=newNode;
}
else
{
head->prev=newNode;
newNode->next=head;
head=newNode;
}
}


void addtotail(Y val)
{
DLLNode<Y> *newNode=new DLLNode<Y>();
newNode->info=val;
if(tail==NULL)
{
head=newNode;
tail=newNode;
}
else
{
tail->next=newNode;
newNode->prev=tail;
tail=newNode;
}
}


void search(Y val)
{
p=head;
if(tail==NULL)
{
cout<<"List is empty\n";
return;
}
else
{
while(p!=NULL)
{
if(p->info==val)
{
cout<<"Element found\n";
return;
}
p=p->next;
}
cout<<"Element not found\n";
return;
}
}


void deletefromhead()
{
if(head==NULL)
{
cout<<"List is empty\n";
return;
}
else if(head==tail)
{
delete head;
head=tail=NULL;
return;
}
else
{
p=head;
head=head->next;
delete p;
head->prev=NULL;
}
}


void deletefromtail()
{
if(head==NULL)
{
cout<<"List is empty\n";
return;
}
else if(head==tail)
{
delete head;
head=tail=NULL;
return;
}
else
{
p=tail;
tail=tail->prev;
delete p;
tail->next=NULL;
}
}


void traverse(){
p=head;
if(p!=NULL){

while(p!=NULL){
cout<<p->info<<" ";
p=p->next;
}
cout<<"\n";
}
else cout<<"Empty\n";
}


void deleteOdd();

};

//*****************************************
//*****************************************

template<class Y>
void DLList<Y>::deleteOdd(){
p=head;
if(p!=NULL){
head=head->next;
delete p;
p=head;
if(p!=NULL){
DLLNode<Y> *q;
while(p->next!=NULL){
if(p->next->next==NULL){
delete p->next;
p->next=NULL;
break;
}
else{
q=p->next;
p->next=p->next->next;
delete q;
p=p->next;
}
}
}
tail=p;
traverse();
}
else{
cout<<"\nEmpty";
}

}

//*****************************************
//*****************************************

int main()
{
DLList<int> list1;
int i,size1,info,a=0;

cout<<"\nEnter the size of List: ";
cin>>size1;

cout<<"\nEnter the list:\n";
for(i=0;i<size1;i++){
cout<<"\nEnter element "<<++a<<" : ";
cin>>info;
list1.addtohead(info);
}

cout<<"List: ";
list1.traverse();

cout<<"\nList after deleting all odd numbered nodes : ";
list1.deleteOdd();


}
